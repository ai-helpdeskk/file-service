name: File Service CD

on:
  workflow_run:
    workflows: ["File Service CI"]
    branches: [main]
    types:
      - completed
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy File Service
    runs-on: [self-hosted]
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Verify kubectl access
      run: |
        kubectl cluster-info || {
          echo "‚ùå kubectl not accessible"
          exit 1
        }
        kubectl get nodes || {
          echo "‚ùå Cannot access cluster nodes"
          exit 1
        }
        echo "‚úÖ Cluster access verified"
    
    - name: Wait for infrastructure dependencies
      run: |
        echo "‚è≥ Waiting for infrastructure to be ready..."
        
        # Wait for namespace
        echo "Checking for namespace..."
        for i in {1..30}; do
          if kubectl get namespace bedrock-chat 2>/dev/null; then
            echo "‚úÖ Namespace found"
            break
          fi
          echo "Waiting for namespace... ($i/30)"
          sleep 10
        done
        
        # Wait for MySQL secrets
        echo "Checking for MySQL secrets..."
        for i in {1..30}; do
          if kubectl get secret mysql-secrets -n bedrock-chat 2>/dev/null; then
            echo "‚úÖ MySQL secrets found"
            break
          fi
          echo "Waiting for MySQL secrets... ($i/30)"
          sleep 10
        done
        
        # Wait for MySQL to be ready (optional)
        echo "Checking for MySQL..."
        kubectl wait --for=condition=ready pod -l app=mysql -n bedrock-chat --timeout=300s || echo "‚ö†Ô∏è MySQL not ready yet, but continuing..."
        
        # Wait for file uploads PV
        echo "Checking for file uploads PV..."
        for i in {1..30}; do
          if kubectl get pv file-uploads-pv 2>/dev/null; then
            echo "‚úÖ File uploads PV found"
            break
          fi
          echo "Waiting for file uploads PV... ($i/30)"
          sleep 10
        done
        
        echo "‚úÖ Infrastructure dependencies checked"
    
    - name: Get latest image tag
      id: get-image
      run: |
        IMAGE_TAG="ghcr.io/${{ github.repository_owner }}/bedrock-chat-file-service:latest"
        echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "Using image: $IMAGE_TAG"
    
    - name: Update deployment manifests
      run: |
        cd k8s
        
        if [ -f deployment.yaml ]; then
          sed -i "s|image: ghcr.io/.*/bedrock-chat-file-service:.*|image: ${{ steps.get-image.outputs.image-tag }}|g" deployment.yaml
          echo "Updated deployment.yaml:"
          grep "image:" deployment.yaml || echo "No image line found"
        else
          echo "‚ö†Ô∏è deployment.yaml not found"
        fi
    
    - name: Deploy File Service
      run: |
        echo "üöÄ Deploying File Service to Kubernetes..."
        
        kubectl apply -f k8s/ -n bedrock-chat || {
          echo "‚ö†Ô∏è Some manifests failed to apply"
        }
        
        echo "‚è≥ Waiting for deployment rollout..."
        kubectl rollout status deployment/file-service -n bedrock-chat --timeout=300s || {
          echo "‚ö†Ô∏è Deployment rollout timed out or failed"
          kubectl get pods -n bedrock-chat -l app=file-service
        }
        
        echo "‚úÖ File Service deployment process completed"
    
    - name: Verify deployment
      run: |
        echo "üîç Verifying File Service deployment..."
        
        echo "Checking pods..."
        kubectl get pods -n bedrock-chat -l app=file-service -o wide || echo "No file-service pods found"
        
        echo "Checking service..."
        kubectl get service file-service -n bedrock-chat || echo "No file-service service found"
        
        echo "Checking PVC..."
        kubectl get pvc -n bedrock-chat || echo "No PVCs found"
        
        echo "Checking recent logs..."
        kubectl logs -n bedrock-chat -l app=file-service --tail=20 || echo "No logs available"
        
        echo "Testing health endpoint..."
        kubectl run test-file-service-$RANDOM --image=curlimages/curl --rm -i --restart=Never -n bedrock-chat --timeout=60s -- \
          curl -f http://file-service.bedrock-chat.svc.cluster.local:7000/health || echo "Health check completed (may have failed)"
        
        echo "‚úÖ File Service verification completed"
    
    - name: Deployment summary
      run: |
        echo "üéâ **File Service Deployment Process Completed!**"
        echo ""
        echo "üìã **Service Status:**"
        kubectl get pods,svc,pvc -n bedrock-chat -l app=file-service || echo "Components not found"
        echo ""
        echo "üí° **Next Steps:**"
        echo "- Verify persistent volume is properly mounted"
        echo "- Check file upload permissions"
        echo "- Monitor logs: kubectl logs -f deployment/file-service -n bedrock-chat"
