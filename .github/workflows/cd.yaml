name: File Service CD

on:
  workflow_run:
    workflows: ["File Service CI"]
    branches: [main]
    types:
      - completed
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy File Service
    runs-on: [self-hosted]
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Verify environment
      run: |
        echo "üîç Verifying deployment environment..."
        echo "Runner: $(uname -a)"
        echo "Docker version: $(docker --version)"
        echo "kubectl version: $(kubectl version --client --short 2>/dev/null || echo 'kubectl not found')"
        
        if ! kubectl cluster-info &>/dev/null; then
          echo "‚ùå kubectl cannot access cluster"
          exit 1
        fi
        echo "‚úÖ Environment verified"

    - name: Wait for dependencies
      run: |
        echo "‚è≥ Waiting for dependencies to be ready..."
        
        # Wait for namespace
        timeout 300 bash -c 'until kubectl get namespace bedrock-chat-v2 2>/dev/null; do echo "Waiting for namespace..."; sleep 10; done' || {
          echo "Creating namespace..."
          kubectl create namespace bedrock-chat-v2
        }
        
        # Wait for MySQL to be ready (file service depends on database)
        echo "üóÑÔ∏è Waiting for MySQL database..."
        timeout 600 bash -c 'until kubectl get pods -n bedrock-chat-v2 -l app=mysql 2>/dev/null | grep -q Running; do echo "Waiting for MySQL..."; sleep 15; done' || echo "‚ö†Ô∏è MySQL not ready, but continuing..."
        
        # Wait for app-config
        timeout 300 bash -c 'until kubectl get configmap app-config -n bedrock-chat-v2 2>/dev/null; do echo "Waiting for app-config..."; sleep 10; done' || {
          echo "üìù Creating app-config ConfigMap..."
          kubectl create configmap app-config \
            --from-literal=DATABASE_URL="mysql://bedrock_user:bedrock_password@mysql:3306/bedrock_chat" \
            --from-literal=BEDROCK_SERVICE_URL="http://bedrock-service:9000" \
            --from-literal=FILE_SERVICE_URL="http://file-service:7000" \
            --from-literal=AWS_REGION="us-east-1" \
            --from-literal=REACT_APP_API_URL="/api" \
            -n bedrock-chat-v2
        }
        
        # Wait for docker-hub-secret
        timeout 300 bash -c 'until kubectl get secret docker-hub-secret -n bedrock-chat-v2 2>/dev/null; do echo "Waiting for docker-hub-secret..."; sleep 10; done' || {
          echo "üîë Creating placeholder Docker Hub secret..."
          kubectl create secret generic docker-hub-secret \
            --from-literal=.dockerconfigjson='{"auths":{"https://index.docker.io/v1/":{"auth":"ZHVtbXk="}}}' \
            --type=kubernetes.io/dockerconfigjson \
            -n bedrock-chat-v2
        }
        
        echo "‚úÖ Dependencies checked"

    - name: Deploy File Service
      run: |
        echo "üöÄ Deploying File Service..."
        
        # Apply in order: Service first for DNS, then Deployment
        echo "üì° Creating service..."
        kubectl apply -f k8s/service.yaml -n bedrock-chat-v2
        
        echo "üèóÔ∏è Creating deployment..."
        kubectl apply -f k8s/deployment.yaml -n bedrock-chat-v2
        
        # Apply HPA if available
        if [[ -f k8s/hpa.yaml ]]; then
          echo "üìà Applying HPA..."
          kubectl apply -f k8s/hpa.yaml -n bedrock-chat-v2 || echo "‚ö†Ô∏è HPA failed (metrics-server may not be available)"
        fi
        
        # Apply Network Policy if available
        if [[ -f k8s/network-policy.yaml ]]; then
          echo "üîí Applying Network Policy..."
          kubectl apply -f k8s/network-policy.yaml -n bedrock-chat-v2 || echo "‚ö†Ô∏è Network Policy failed"
        fi
        
        echo "‚è≥ Waiting for deployment rollout..."
        if kubectl rollout status deployment/file-service -n bedrock-chat-v2 --timeout=600s; then
          echo "‚úÖ File Service deployed successfully"
        else
          echo "‚ö†Ô∏è Deployment rollout timeout - checking status..."
          kubectl get pods -n bedrock-chat-v2 -l app=file-service -o wide
          kubectl describe deployment file-service -n bedrock-chat-v2
        fi

    - name: Wait for readiness
      run: |
        echo "‚è≥ Waiting for File Service to be ready..."
        
        # Wait for pods to be ready
        kubectl wait --for=condition=ready pod -l app=file-service -n bedrock-chat-v2 --timeout=300s || {
          echo "‚ö†Ô∏è Pods not ready within timeout"
          echo "Pod status:"
          kubectl get pods -n bedrock-chat-v2 -l app=file-service -o wide
          echo "Pod events:"
          kubectl get events -n bedrock-chat-v2 --field-selector involvedObject.name=file-service
        }

    - name: Verify deployment
      run: |
        echo "üîç Verifying File Service deployment..."
        
        echo "=== Deployment Status ==="
        kubectl get deployment file-service -n bedrock-chat-v2 -o wide || echo "Deployment not found"
        
        echo "=== Pods ==="
        kubectl get pods -n bedrock-chat-v2 -l app=file-service -o wide || echo "No pods found"
        
        echo "=== Service ==="
        kubectl get service file-service -n bedrock-chat-v2 -o wide || echo "Service not found"
        
        echo "=== Recent Logs ==="
        kubectl logs -n bedrock-chat-v2 -l app=file-service --tail=20 || echo "No logs available"

    - name: Health check
      run: |
        echo "üè• Performing health checks..."
        
        # Test health endpoint
        for i in {1..12}; do
          echo "Health check attempt $i/12..."
          
          if kubectl run file-health-test-$RANDOM \
            --image=curlimages/curl \
            --rm -i --restart=Never \
            --timeout=30s \
            -n bedrock-chat-v2 \
            -- curl -f -m 10 http://file-service.bedrock-chat-v2.svc.cluster.local:7000/health; then
            echo "‚úÖ File Service health check passed"
            break
          else
            if [[ $i -eq 12 ]]; then
              echo "‚ùå All health check attempts failed"
              echo "Checking service status:"
              kubectl get pods -n bedrock-chat-v2 -l app=file-service
              kubectl describe service file-service -n bedrock-chat-v2
            else
              echo "‚ö†Ô∏è Health check failed, retrying in 15 seconds..."
              sleep 15
            fi
          fi
        done

    - name: Test file service endpoints
      run: |
        echo "üß™ Testing File Service endpoints..."
        
        # Test root endpoint
        echo "=== Testing Root Endpoint ==="
        kubectl run file-root-test-$RANDOM \
          --image=curlimages/curl \
          --rm -i --restart=Never \
          --timeout=30s \
          -n bedrock-chat-v2 \
          -- curl -f -m 10 http://file-service.bedrock-chat-v2.svc.cluster.local:7000/ || echo "‚ö†Ô∏è Root endpoint test failed"
        
        # Test files endpoint (should return empty list)
        echo "=== Testing Files Endpoint ==="
        kubectl run file-list-test-$RANDOM \
          --image=curlimages/curl \
          --rm -i --restart=Never \
          --timeout=30s \
          -n bedrock-chat-v2 \
          -- curl -f -m 10 http://file-service.bedrock-chat-v2.svc.cluster.local:7000/files/test-session || echo "‚ö†Ô∏è Files endpoint test failed (expected for new session)"

    - name: Test database connectivity
      run: |
        echo "üíæ Testing database connectivity..."
        
        # Test if file service can connect to database
        kubectl exec -n bedrock-chat-v2 -l app=file-service -- python -c "
        import mysql.connector
        import os
        
        try:
            # Parse DATABASE_URL
            database_url = os.getenv('DATABASE_URL', 'mysql://bedrock_user:bedrock_password@mysql:3306/bedrock_chat')
            print(f'Testing connection to: {database_url}')
            
            url_parts = database_url.replace('mysql://', '').split('/')
            auth_host = url_parts[0].split('@')
            auth = auth_host[0].split(':')
            host_port = auth_host[1].split(':')
            
            connection = mysql.connector.connect(
                host=host_port[0],
                port=int(host_port[1]) if len(host_port) > 1 else 3306,
                user=auth[0],
                password=auth[1],
                database=url_parts[1],
                connection_timeout=10
            )
            
            cursor = connection.cursor()
            cursor.execute('SHOW TABLES')
            tables = cursor.fetchall()
            print(f'‚úÖ Database connection successful. Found {len(tables)} tables.')
            
            # Check if file_uploads table exists
            cursor.execute(\"SHOW TABLES LIKE 'file_uploads'\")
            if cursor.fetchone():
                print('‚úÖ file_uploads table exists')
            else:
                print('‚ö†Ô∏è file_uploads table does not exist - may be created on first upload')
            
            cursor.close()
            connection.close()
            
        except Exception as e:
            print(f'‚ùå Database connection failed: {e}')
            exit(1)
        " 2>/dev/null || echo "‚ö†Ô∏è Database connectivity test failed - ensure MySQL is running and accessible"

    - name: Setup file storage
      run: |
        echo "üìÅ Setting up file storage..."
        
        # Check if persistent volume is available
        kubectl exec -n bedrock-chat-v2 -l app=file-service -- python -c "
        import os
        
        # Check upload directory
        upload_dir = os.getenv('UPLOAD_DIRECTORY', '/app/uploads')
        print(f'Checking upload directory: {upload_dir}')
        
        if not os.path.exists(upload_dir):
            os.makedirs(upload_dir, exist_ok=True)
            print(f'‚úÖ Created upload directory: {upload_dir}')
        else:
            print(f'‚úÖ Upload directory exists: {upload_dir}')
        
        # Test write permissions
        try:
            test_file = os.path.join(upload_dir, 'test_write.txt')
            with open(test_file, 'w') as f:
                f.write('test')
            os.remove(test_file)
            print('‚úÖ Write permissions confirmed')
        except Exception as e:
            print(f'‚ùå Write permission test failed: {e}')
        " || echo "‚ö†Ô∏è File storage setup check failed"

    - name: Performance baseline
      run: |
        echo "üìä Establishing performance baseline..."
        
        # Check resource usage
        echo "=== Resource Usage ==="
        kubectl top pods -n bedrock-chat-v2 -l app=file-service || echo "Metrics not available"
        
        # Check service responsiveness
        echo "=== Response Time Test ==="
        kubectl run perf-test-$RANDOM \
          --image=curlimages/curl \
          --rm -i --restart=Never \
          --timeout=60s \
          -n bedrock-chat-v2 \
          -- sh -c 'for i in $(seq 1 5); do
            echo "Request $i:";
            time curl -f -m 5 http://file-service.bedrock-chat-v2.svc.cluster.local:7000/health;
            echo "";
          done' || echo "‚ö†Ô∏è Performance test failed"

    - name: Deployment summary
      run: |
        echo "üéâ **File Service Deployment Summary**"
        echo ""
        echo "üìã **Status:**"
        kubectl get deployment,pods,svc -n bedrock-chat-v2 -l app=file-service 2>/dev/null || echo "Components not ready yet"
        echo ""
        echo "üîß **Configuration:**"
        echo "- Service URL: http://file-service.bedrock-chat-v2.svc.cluster.local:7000"
        echo "- Database: Connected to MySQL"
        echo "- File Storage: Local directory (/app/uploads)"
        echo ""
        echo "üîó **Available Endpoints:**"
        echo "- Health: http://file-service.bedrock-chat-v2.svc.cluster.local:7000/health"
        echo "- Upload: http://file-service.bedrock-chat-v2.svc.cluster.local:7000/upload (POST)"
        echo "- Files: http://file-service.bedrock-chat-v2.svc.cluster.local:7000/files/{session_id}"
        echo "- Download: http://file-service.bedrock-chat-v2.svc.cluster.local:7000/download/{file_id}"
        echo ""
        echo "üìù **Supported File Types:**"
        echo "- PDF documents"
        echo "- Text files (.txt, .md)"
        echo "- Word documents (.docx)"
        echo "- CSV files"
        echo "- JSON files"
        echo ""
        echo "üí° **Next Steps:**"
        echo "1. Test file upload functionality"
        echo "2. Verify text extraction from various file types"
        echo "3. Monitor storage usage"
        echo "4. Test integration with API Gateway"
        echo ""
        echo "üìä **Monitoring Commands:**"
        echo "- Watch pods: kubectl get pods -n bedrock-chat-v2 -l app=file-service -w"
        echo "- Check logs: kubectl logs -f deployment/file-service -n bedrock-chat-v2"
        echo "- Test upload: curl -F 'files=@test.txt' http://file-service:7000/upload"
        echo ""
        echo "üîç **Troubleshooting:**"
        echo "- Check database connection: kubectl logs deployment/file-service -n bedrock-chat-v2 | grep -i mysql"
        echo "- Check file permissions: kubectl exec -n bedrock-chat-v2 deployment/file-service -- ls -la /app/uploads"
        echo "- Check service connectivity: kubectl exec -n bedrock-chat-v2 deployment/api-gateway -- curl file-service:7000/health"
        echo ""
        echo "‚úÖ **File Service is ready for file processing!**"
